//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NoSMonitor.NoSAgentService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Settings", Namespace="http://schemas.datacontract.org/2004/07/NoSAgent")]
    [System.SerializableAttribute()]
    public partial class Settings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IntervalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerIdField, value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Interval {
            get {
                return this.IntervalField;
            }
            set {
                if ((this.IntervalField.Equals(value) != true)) {
                    this.IntervalField = value;
                    this.RaisePropertyChanged("Interval");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NoSAgentService.IAgentService")]
    public interface IAgentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/StopAgent", ReplyAction="http://tempuri.org/IAgentService/StopAgentResponse")]
        bool StopAgent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/StopAgent", ReplyAction="http://tempuri.org/IAgentService/StopAgentResponse")]
        System.Threading.Tasks.Task<bool> StopAgentAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/StartAgent", ReplyAction="http://tempuri.org/IAgentService/StartAgentResponse")]
        bool StartAgent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/StartAgent", ReplyAction="http://tempuri.org/IAgentService/StartAgentResponse")]
        System.Threading.Tasks.Task<bool> StartAgentAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/SaveSettings", ReplyAction="http://tempuri.org/IAgentService/SaveSettingsResponse")]
        bool SaveSettings(NoSMonitor.NoSAgentService.Settings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/SaveSettings", ReplyAction="http://tempuri.org/IAgentService/SaveSettingsResponse")]
        System.Threading.Tasks.Task<bool> SaveSettingsAsync(NoSMonitor.NoSAgentService.Settings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetSettings", ReplyAction="http://tempuri.org/IAgentService/GetSettingsResponse")]
        NoSMonitor.NoSAgentService.Settings GetSettings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetSettings", ReplyAction="http://tempuri.org/IAgentService/GetSettingsResponse")]
        System.Threading.Tasks.Task<NoSMonitor.NoSAgentService.Settings> GetSettingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/Send", ReplyAction="http://tempuri.org/IAgentService/SendResponse")]
        bool Send();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/Send", ReplyAction="http://tempuri.org/IAgentService/SendResponse")]
        System.Threading.Tasks.Task<bool> SendAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAgentServiceChannel : NoSMonitor.NoSAgentService.IAgentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AgentServiceClient : System.ServiceModel.ClientBase<NoSMonitor.NoSAgentService.IAgentService>, NoSMonitor.NoSAgentService.IAgentService {
        
        public AgentServiceClient() {
        }
        
        public AgentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AgentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AgentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AgentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool StopAgent() {
            return base.Channel.StopAgent();
        }
        
        public System.Threading.Tasks.Task<bool> StopAgentAsync() {
            return base.Channel.StopAgentAsync();
        }
        
        public bool StartAgent() {
            return base.Channel.StartAgent();
        }
        
        public System.Threading.Tasks.Task<bool> StartAgentAsync() {
            return base.Channel.StartAgentAsync();
        }
        
        public bool SaveSettings(NoSMonitor.NoSAgentService.Settings settings) {
            return base.Channel.SaveSettings(settings);
        }
        
        public System.Threading.Tasks.Task<bool> SaveSettingsAsync(NoSMonitor.NoSAgentService.Settings settings) {
            return base.Channel.SaveSettingsAsync(settings);
        }
        
        public NoSMonitor.NoSAgentService.Settings GetSettings() {
            return base.Channel.GetSettings();
        }
        
        public System.Threading.Tasks.Task<NoSMonitor.NoSAgentService.Settings> GetSettingsAsync() {
            return base.Channel.GetSettingsAsync();
        }
        
        public bool Send() {
            return base.Channel.Send();
        }
        
        public System.Threading.Tasks.Task<bool> SendAsync() {
            return base.Channel.SendAsync();
        }
    }
}
